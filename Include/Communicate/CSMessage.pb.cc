#include "stdafx.h" 
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmsg {
class TCSMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TCSMessage> {
} _TCSMessage_default_instance_;

namespace protobuf_CSMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCSMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCSMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCSMessage, emsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCSMessage, stloginreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCSMessage, stloginrsp_),
  2,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(TCSMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TCSMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CSMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _TCSMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmsg::protobuf_login_2eproto::InitDefaults();
  _TCSMessage_default_instance_.DefaultConstruct();
  _TCSMessage_default_instance_.get_mutable()->stloginreq_ = const_cast< ::csmsg::TMSG_LOGIN_REQ*>(
      ::csmsg::TMSG_LOGIN_REQ::internal_default_instance());
  _TCSMessage_default_instance_.get_mutable()->stloginrsp_ = const_cast< ::csmsg::TMSG_LOGIN_RSP*>(
      ::csmsg::TMSG_LOGIN_RSP::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017CSMessage.proto\022\005csmsg\032\013login.proto\"\207\001"
      "\n\nTCSMessage\022#\n\006eMsgID\030\001 \002(\0162\023.csmsg.ECS"
      "MessageID\022)\n\nstLoginReq\030\002 \001(\0132\025.csmsg.TM"
      "SG_LOGIN_REQ\022)\n\nstLoginRsp\030\003 \001(\0132\025.csmsg"
      ".TMSG_LOGIN_RSP*8\n\014ECSMessageID\022\023\n\017eMsgI"
      "D_LoginReq\020\001\022\023\n\017eMsgID_LoginRsp\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSMessage.proto", &protobuf_RegisterTypes);
  ::csmsg::protobuf_login_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CSMessage_2eproto

const ::google::protobuf::EnumDescriptor* ECSMessageID_descriptor() {
  protobuf_CSMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CSMessage_2eproto::file_level_enum_descriptors[0];
}
bool ECSMessageID_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TCSMessage::kEMsgIDFieldNumber;
const int TCSMessage::kStLoginReqFieldNumber;
const int TCSMessage::kStLoginRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TCSMessage::TCSMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CSMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:csmsg.TCSMessage)
}
TCSMessage::TCSMessage(const TCSMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stloginreq()) {
    stloginreq_ = new ::csmsg::TMSG_LOGIN_REQ(*from.stloginreq_);
  } else {
    stloginreq_ = NULL;
  }
  if (from.has_stloginrsp()) {
    stloginrsp_ = new ::csmsg::TMSG_LOGIN_RSP(*from.stloginrsp_);
  } else {
    stloginrsp_ = NULL;
  }
  emsgid_ = from.emsgid_;
  // @@protoc_insertion_point(copy_constructor:csmsg.TCSMessage)
}

void TCSMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stloginreq_, 0, reinterpret_cast<char*>(&stloginrsp_) -
    reinterpret_cast<char*>(&stloginreq_) + sizeof(stloginrsp_));
  emsgid_ = 1;
}

TCSMessage::~TCSMessage() {
  // @@protoc_insertion_point(destructor:csmsg.TCSMessage)
  SharedDtor();
}

void TCSMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stloginreq_;
  }
  if (this != internal_default_instance()) {
    delete stloginrsp_;
  }
}

void TCSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCSMessage::descriptor() {
  protobuf_CSMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CSMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TCSMessage& TCSMessage::default_instance() {
  protobuf_CSMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TCSMessage* TCSMessage::New(::google::protobuf::Arena* arena) const {
  TCSMessage* n = new TCSMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TCSMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:csmsg.TCSMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_stloginreq()) {
      GOOGLE_DCHECK(stloginreq_ != NULL);
      stloginreq_->::csmsg::TMSG_LOGIN_REQ::Clear();
    }
    if (has_stloginrsp()) {
      GOOGLE_DCHECK(stloginrsp_ != NULL);
      stloginrsp_->::csmsg::TMSG_LOGIN_RSP::Clear();
    }
    emsgid_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TCSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csmsg.TCSMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .csmsg.ECSMessageID eMsgID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::csmsg::ECSMessageID_IsValid(value)) {
            set_emsgid(static_cast< ::csmsg::ECSMessageID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .csmsg.TMSG_LOGIN_REQ stLoginReq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stloginreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .csmsg.TMSG_LOGIN_RSP stLoginRsp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stloginrsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csmsg.TCSMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csmsg.TCSMessage)
  return false;
#undef DO_
}

void TCSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csmsg.TCSMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .csmsg.ECSMessageID eMsgID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->emsgid(), output);
  }

  // optional .csmsg.TMSG_LOGIN_REQ stLoginReq = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stloginreq_, output);
  }

  // optional .csmsg.TMSG_LOGIN_RSP stLoginRsp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stloginrsp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csmsg.TCSMessage)
}

::google::protobuf::uint8* TCSMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csmsg.TCSMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .csmsg.ECSMessageID eMsgID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->emsgid(), target);
  }

  // optional .csmsg.TMSG_LOGIN_REQ stLoginReq = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stloginreq_, deterministic, target);
  }

  // optional .csmsg.TMSG_LOGIN_RSP stLoginRsp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stloginrsp_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csmsg.TCSMessage)
  return target;
}

size_t TCSMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csmsg.TCSMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .csmsg.ECSMessageID eMsgID = 1;
  if (has_emsgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgid());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .csmsg.TMSG_LOGIN_REQ stLoginReq = 2;
    if (has_stloginreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stloginreq_);
    }

    // optional .csmsg.TMSG_LOGIN_RSP stLoginRsp = 3;
    if (has_stloginrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stloginrsp_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCSMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:csmsg.TCSMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TCSMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TCSMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:csmsg.TCSMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:csmsg.TCSMessage)
    MergeFrom(*source);
  }
}

void TCSMessage::MergeFrom(const TCSMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:csmsg.TCSMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stloginreq()->::csmsg::TMSG_LOGIN_REQ::MergeFrom(from.stloginreq());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stloginrsp()->::csmsg::TMSG_LOGIN_RSP::MergeFrom(from.stloginrsp());
    }
    if (cached_has_bits & 0x00000004u) {
      emsgid_ = from.emsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TCSMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:csmsg.TCSMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCSMessage::CopyFrom(const TCSMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csmsg.TCSMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_stloginreq()) {
    if (!this->stloginreq_->IsInitialized()) return false;
  }
  if (has_stloginrsp()) {
    if (!this->stloginrsp_->IsInitialized()) return false;
  }
  return true;
}

void TCSMessage::Swap(TCSMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TCSMessage::InternalSwap(TCSMessage* other) {
  std::swap(stloginreq_, other->stloginreq_);
  std::swap(stloginrsp_, other->stloginrsp_);
  std::swap(emsgid_, other->emsgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TCSMessage::GetMetadata() const {
  protobuf_CSMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CSMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TCSMessage

// required .csmsg.ECSMessageID eMsgID = 1;
bool TCSMessage::has_emsgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TCSMessage::set_has_emsgid() {
  _has_bits_[0] |= 0x00000004u;
}
void TCSMessage::clear_has_emsgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TCSMessage::clear_emsgid() {
  emsgid_ = 1;
  clear_has_emsgid();
}
::csmsg::ECSMessageID TCSMessage::emsgid() const {
  // @@protoc_insertion_point(field_get:csmsg.TCSMessage.eMsgID)
  return static_cast< ::csmsg::ECSMessageID >(emsgid_);
}
void TCSMessage::set_emsgid(::csmsg::ECSMessageID value) {
  assert(::csmsg::ECSMessageID_IsValid(value));
  set_has_emsgid();
  emsgid_ = value;
  // @@protoc_insertion_point(field_set:csmsg.TCSMessage.eMsgID)
}

// optional .csmsg.TMSG_LOGIN_REQ stLoginReq = 2;
bool TCSMessage::has_stloginreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TCSMessage::set_has_stloginreq() {
  _has_bits_[0] |= 0x00000001u;
}
void TCSMessage::clear_has_stloginreq() {
  _has_bits_[0] &= ~0x00000001u;
}
void TCSMessage::clear_stloginreq() {
  if (stloginreq_ != NULL) stloginreq_->::csmsg::TMSG_LOGIN_REQ::Clear();
  clear_has_stloginreq();
}
const ::csmsg::TMSG_LOGIN_REQ& TCSMessage::stloginreq() const {
  // @@protoc_insertion_point(field_get:csmsg.TCSMessage.stLoginReq)
  return stloginreq_ != NULL ? *stloginreq_
                         : *::csmsg::TMSG_LOGIN_REQ::internal_default_instance();
}
::csmsg::TMSG_LOGIN_REQ* TCSMessage::mutable_stloginreq() {
  set_has_stloginreq();
  if (stloginreq_ == NULL) {
    stloginreq_ = new ::csmsg::TMSG_LOGIN_REQ;
  }
  // @@protoc_insertion_point(field_mutable:csmsg.TCSMessage.stLoginReq)
  return stloginreq_;
}
::csmsg::TMSG_LOGIN_REQ* TCSMessage::release_stloginreq() {
  // @@protoc_insertion_point(field_release:csmsg.TCSMessage.stLoginReq)
  clear_has_stloginreq();
  ::csmsg::TMSG_LOGIN_REQ* temp = stloginreq_;
  stloginreq_ = NULL;
  return temp;
}
void TCSMessage::set_allocated_stloginreq(::csmsg::TMSG_LOGIN_REQ* stloginreq) {
  delete stloginreq_;
  stloginreq_ = stloginreq;
  if (stloginreq) {
    set_has_stloginreq();
  } else {
    clear_has_stloginreq();
  }
  // @@protoc_insertion_point(field_set_allocated:csmsg.TCSMessage.stLoginReq)
}

// optional .csmsg.TMSG_LOGIN_RSP stLoginRsp = 3;
bool TCSMessage::has_stloginrsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TCSMessage::set_has_stloginrsp() {
  _has_bits_[0] |= 0x00000002u;
}
void TCSMessage::clear_has_stloginrsp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TCSMessage::clear_stloginrsp() {
  if (stloginrsp_ != NULL) stloginrsp_->::csmsg::TMSG_LOGIN_RSP::Clear();
  clear_has_stloginrsp();
}
const ::csmsg::TMSG_LOGIN_RSP& TCSMessage::stloginrsp() const {
  // @@protoc_insertion_point(field_get:csmsg.TCSMessage.stLoginRsp)
  return stloginrsp_ != NULL ? *stloginrsp_
                         : *::csmsg::TMSG_LOGIN_RSP::internal_default_instance();
}
::csmsg::TMSG_LOGIN_RSP* TCSMessage::mutable_stloginrsp() {
  set_has_stloginrsp();
  if (stloginrsp_ == NULL) {
    stloginrsp_ = new ::csmsg::TMSG_LOGIN_RSP;
  }
  // @@protoc_insertion_point(field_mutable:csmsg.TCSMessage.stLoginRsp)
  return stloginrsp_;
}
::csmsg::TMSG_LOGIN_RSP* TCSMessage::release_stloginrsp() {
  // @@protoc_insertion_point(field_release:csmsg.TCSMessage.stLoginRsp)
  clear_has_stloginrsp();
  ::csmsg::TMSG_LOGIN_RSP* temp = stloginrsp_;
  stloginrsp_ = NULL;
  return temp;
}
void TCSMessage::set_allocated_stloginrsp(::csmsg::TMSG_LOGIN_RSP* stloginrsp) {
  delete stloginrsp_;
  stloginrsp_ = stloginrsp;
  if (stloginrsp) {
    set_has_stloginrsp();
  } else {
    clear_has_stloginrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:csmsg.TCSMessage.stLoginRsp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace csmsg

// @@protoc_insertion_point(global_scope)
